import Peg.ParseTree
import Token

type Terminal = Token
type NonTerminal = NonTerminal

# --------------------------------------------------------------------------------------------------

Terminals:
    "LowerId" = Token(kind = TokenKind.LowerId, ..)
    "UpperId" = Token(kind = TokenKind.UpperId, ..)
    "TildeUpperId" = Token(kind = TokenKind.TildeUpperId, ..)
    "and" = Token(kind = TokenKind.And, ..)
    "break" = Token(kind = TokenKind.Break, ..)
    "continue" = Token(kind = TokenKind.Continue, ..)
    "do" = Token(kind = TokenKind.Do, ..)
    "elif" = Token(kind = TokenKind.Elif, ..)
    "else" = Token(kind = TokenKind.Else, ..)
    "Fn" = Token(kind = TokenKind.UpperFn, ..)
    "for" = Token(kind = TokenKind.For, ..)
    "if" = Token(kind = TokenKind.If, ..)
    "impl" = Token(kind = TokenKind.Impl, ..)
    "import" = Token(kind = TokenKind.Import, ..)
    "in" = Token(kind = TokenKind.In, ..)
    "is" = Token(kind = TokenKind.Is, ..)
    "let" = Token(kind = TokenKind.Let, ..)
    "loop" = Token(kind = TokenKind.Loop, ..)
    "match" = Token(kind = TokenKind.Match, ..)
    "not" = Token(kind = TokenKind.Not, ..)
    "or" = Token(kind = TokenKind.Or, ..)
    "prim" = Token(kind = TokenKind.Prim, ..)
    "return" = Token(kind = TokenKind.Return, ..)
    "trait" = Token(kind = TokenKind.Trait, ..)
    "type" = Token(kind = TokenKind.Type, ..)
    "while" = Token(kind = TokenKind.While, ..)
    "row[" = Token(kind = TokenKind.LBracketRow, ..)
    "row(" = Token(kind = TokenKind.LParenRow, ..)
    "(" = Token(kind = TokenKind.LParen, ..)
    ")" = Token(kind = TokenKind.RParen, ..)
    "[" = Token(kind = TokenKind.LBracket, ..)
    "]" = Token(kind = TokenKind.RBracket, ..)
    ":" = Token(kind = TokenKind.Colon, ..)
    "," = Token(kind = TokenKind.Comma, ..)
    ".." = Token(kind = TokenKind.DotDot, ..)
    "." = Token(kind = TokenKind.Dot, ..)
    "=" = Token(kind = TokenKind.Eq, ..)
    "==" = Token(kind = TokenKind.EqEq, ..)
    "+=" = Token(kind = TokenKind.PlusEq, ..)
    "-=" = Token(kind = TokenKind.MinusEq, ..)
    "*=" = Token(kind = TokenKind.StarEq, ..)
    "^=" = Token(kind = TokenKind.CaretEq, ..)
    "!=" = Token(kind = TokenKind.ExclamationEq, ..)
    "-" = Token(kind = TokenKind.Minus, ..)
    "~" = Token(kind = TokenKind.Tilde, ..)
    "+" = Token(kind = TokenKind.Plus, ..)
    "-" = Token(kind = TokenKind.Minus, ..)
    "/" = Token(kind = TokenKind.Slash, ..)
    "*" = Token(kind = TokenKind.Star, ..)
    "|" = Token(kind = TokenKind.Pipe, ..)
    "||" = Token(kind = TokenKind.PipePipe, ..)
    "&" = Token(kind = TokenKind.Amp, ..)
    "/" = Token(kind = TokenKind.Slash, ..)
    "_" = Token(kind = TokenKind.Underscore, ..)
    ">" = Token(kind = TokenKind.RAngle, ..)
    ">>" = Token(kind = TokenKind.DoubleRAngle, ..)
    ">=" = Token(kind = TokenKind.RAngleEq, ..)
    "<" = Token(kind = TokenKind.LAngle, ..)
    "<<" = Token(kind = TokenKind.DoubleLAngle, ..)
    "<=" = Token(kind = TokenKind.LAngleEq, ..)
    "Int" = Token(kind = TokenKind.Int, ..)
    "HexInt" = Token(kind = TokenKind.HexInt, ..)
    "BinInt" = Token(kind = TokenKind.BinInt, ..)
    "Str" = Token(kind = TokenKind.Str, ..)
    "Char" = Token(kind = TokenKind.Char, ..)
    "NEWLINE" = Token(kind = TokenKind.Newline, ..)
    "INDENT" = Token(kind = TokenKind.Indent, ..)
    "DEDENT" = Token(kind = TokenKind.Dedent, ..)
    "label" = Token(kind = TokenKind.Label, ..)


# --------------------------------------------------------------------------------------------------
# Top-level declarations

module Vec[TopDecl]:
    ds=topDecl+ $: ds


topDecl TopDecl:
    t=typeDecl: TopDecl.Type(t)
    t=importDecl: TopDecl.Import(t)
    t=traitDecl: TopDecl.Trait(t)
    t=implDecl: TopDecl.Impl(t)
    t=topFunDecl: TopDecl.Fun(t)


# --------------------------------------------------------------------------------------------------
# Types

type_ Type:
    t=namedType: Type.Named(t)
    id="LowerId": Type.Var(newId(id.text))
    t=recordType: Type.Record(t)
    t=variantType: Type.Variant(t)
    t=fnType: Type.Fn_(t)


 namedType NamedType:
    name="UpperId" "[" arg0=type_ args=("," t=type_)* ","? "]":
        let args = once(arg0).chain(args.iter().map(|arg: (t: Type)|: arg.t)).toVec()
        NamedType(name = newId(name.text), args = args)

    name="UpperId":
        NamedType(name = newId(name.text), args = Vec.empty())


# - ()
# - (x: U32)
# - (x: U32,)
# - (x: U32, y: U32)
# - (x: U32, ..foo)
# - (..foo)
recordType RecordType:
    isRow=recordTypeStart ")":
        RecordType(fields = Vec.empty(), extension = Option.None, isRow = isRow)

    isRow=recordTypeStart ".." ext="LowerId" ")":
        RecordType(fields = Vec.empty(), extension = Option.Some(newId(ext.text)), isRow = isRow)

    isRow=recordTypeStart f0=recordTypeField fs=("," f=recordTypeField)* ext=recordTypeCont? ")":
        let fields: Vec[Named[Type]] = once(f0).chain(fs.iter().map(|f: (f: Named[Type])|: f.f)).toVec()
        RecordType(fields, extension = ext.flatten(), isRow = isRow)


# Returns whether the type is a row.
recordTypeStart Bool:
    "(": Bool.False
    "row(": Bool.True


recordTypeCont Option[Id]:
    "," id=(".." id="LowerId")?:
        id.map(|i: (id: Token)|: newId(i.id.text))


# - []
# - [A]
# - [A,]
# - [A, B]
# - [A, ..foo]
# - [..foo]
variantType VariantType:
    isRow=variantTypeStart "]":
        VariantType(alts = Vec.empty(), extension = Option.None, isRow = isRow)

    isRow=variantTypeStart ".." ext="LowerId" "]":
        VariantType(alts = Vec.empty(), extension = Option.Some(newId(ext.text)), isRow = isRow)

    isRow=variantTypeStart alt0=variantAlt alts=("," a=variantAlt)* ext=variantTypeCont? "]":
        VariantType(
            alts = once(alt0).chain(alts.iter().map(|alt: (a: VariantAlt)|: alt.a)).toVec(),
            extension = ext.flatten(),
            isRow = isRow,
        )


# Returns whether the type is a row.
variantTypeStart Bool:
    "[": Bool.False
    "row[": Bool.True


variantTypeCont Option[Id]:
    "," id=(".." id="LowerId")?:
        id.map(|id: (id: Token)|: newId(id.id.text))


variantAlt VariantAlt:
    con="UpperId" "(" fields=recordTypeFields ")":
        VariantAlt(con = newId(con.text), fields = fields)

    con="UpperId":
        VariantAlt(con = newId(con.text), fields = Vec.empty())


recordTypeFields Vec[Named[Type]]:
    f0=recordTypeField fs=("," f=recordTypeField)* "," ".." "LowerId":
        # TODO: Extension?
        # TODO: We do we need the type annotation here?
        let vec: Vec[Named[Type]] = once(f0).chain(fs.iter().map(|f: (f: Named[Type])|: f.f)).toVec()
        vec

    f0=recordTypeField fs=("," f=recordTypeField)* ","?:
        let vec: Vec[Named[Type]] = once(f0).chain(fs.iter().map(|f: (f: Named[Type])|: f.f)).toVec()
        vec


recordTypeField Named[Type]:
    name="LowerId" ":" ty=type_:
        Named(name = Option.Some(newId(name.text)), node = ty)

    ty=type_:
        Named(name = Option.None, node = ty)


fnType FnType:
    "Fn" "(" args=fnArgTys? ")" ret=returnTy?:
        let args = args.unwrapOr(Vec.empty())
        let ret = ret.unwrapOr((ret = Option.None, exn = Option.None))
        FnType(args = args, ret = ret.ret, exceptions = ret.exn)


fnArgTys Vec[Type]:
    t0=type_ ts=("," t=type_)* ","?:
        let vec: Vec[Type] = once(t0).chain(ts.iter().map(|t: (t: Type)|: t.t)).toVec()
        vec


returnTy (ret: Option[Type], exn: Option[Type]):
    ret=type_ "/" exn=type_:
        (ret = Option.Some(ret), exn = Option.Some(exn))

    ret=type_:
        (ret = Option.Some(ret), exn = Option.None)

    "/" exn=type_:
        (ret = Option.None, exn = Option.Some(exn))


# --------------------------------------------------------------------------------------------------
# Type declarations

typeDecl TypeDecl:
    "type" name="UpperId" params=("[" params=typeParams "]")? ":" "NEWLINE" "INDENT" rhs=typeDeclRhs "DEDENT":
        TypeDecl(
            name = newId(name.text),
            typeParams = match params:
                Option.Some(params): params.params
                Option.None: Vec.empty(),
            typeParamKinds = Vec.empty(),
            rhs = Option.Some(rhs),
        )

    "type" name="UpperId" params=("[" params=typeParams "]")? "NEWLINE":
        TypeDecl(
            name = newId(name.text),
            typeParams = match params:
                Option.Some(params): params.params
                Option.None: Vec.empty(),
            typeParamKinds = Vec.empty(),
            rhs = Option.None,
        )

    "prim" "type" name="UpperId" params=("[" params=typeParams "]")? "NEWLINE":
        TypeDecl(
            name = newId(name.text),
            typeParams = match params:
                Option.Some(params): params.params
                Option.None: Vec.empty(),
            typeParamKinds = Vec.empty(),
            rhs = Option.None,
        )


typeParams Vec[Id]:
    id0="LowerId" ids=("," id="LowerId")* ","?:
        let vec: Vec[Id] =
            once(newId(id0.text)).chain(ids.iter().map(|id: (id: Token)|: newId(id.id.text))).toVec()
        vec


typeDeclRhs TypeDeclRhs:
    cs=conDecl+:
        TypeDeclRhs.Sum(cs)

    fs=namedField+:
        TypeDeclRhs.Product(ConFields.Named(fs))


conDecl ConDecl:
    name="UpperId" ":" "NEWLINE" "INDENT" fs=namedFields "DEDENT":
        ConDecl(name = newId(name.text), fields = ConFields.Named(fs))

    name="UpperId" "(" fs=unnamedFields? ")" "NEWLINE":
        ConDecl(name = newId(name.text), fields = ConFields.Unnamed(fs.unwrapOr(Vec.empty())))

    name="UpperId" "NEWLINE":
        ConDecl(name = newId(name.text), fields = ConFields.Empty)


namedFields Vec[(name: Id, ty: Type)]:
    fs=namedField+:
        fs


namedField (name: Id, ty: Type):
    name="LowerId" ":" ty=type_ "NEWLINE":
        (name = newId(name.text), ty = ty)


unnamedFields Vec[Type]:
    t0=type_ ts=("," t=type_)* ","?:
        let vec: Vec[Type] = once(t0).chain(ts.iter().map(|t: (t: Type)|: t.t)).toVec()
        vec


# --------------------------------------------------------------------------------------------------
# Expressions

expr Expr:
    e=inlineExpr: e
    # e=blockExpr: e


# Inline expressions don't end with a NEWLINE or DEDENT.
inlineExpr Expr:
    "NEWLINE": panic("TODO")
    # prefixExpr inlineExprCont*:
    #     panic("TODO")


#|
# Block expressions include an indented block and always end with DEDENT.
blockExpr:
    "match" inlineExpr _":" _"NEWLINE" _"INDENT" matchAlt+ _"DEDENT"

    "if" inlineExpr _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"
        ("elif" inlineExpr _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT")*
        ("else" _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT")?

    "do" _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"

    "||" returnTy? ":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"

    "|" fnArgs? "|" returnTy? ":" _"NEWLINE" _"INDENT" stmt + _"DEDENT"


inlineExprCont:
    binOp prefixExpr
    "is" pat


prefixExpr:
    exprPrefix? simpleExpr exprSuffix*


exprSuffix:
    field tyArgs?
    args


field:
    (_"." "LowerId")


args:
    _"(" (arg (_"," arg)* _","?)? _")"


arg:
    "LowerId" "=" expr
    expr


simpleExpr:
    # Variables
    "LowerId" tyArgs?

    # Constructor selection, or sequence
    upperIdPath tyArgs? (_"." sequence)?

    # Records: `(a, b)`, `(a = 1, b = 2)`
    "(" (parenExpr (_"," parenExpr)* _","?)? ")"

    sequence

    "return" inlineExpr?

    "||" returnTy? ":" inlineExpr

    "|" fnArgs? "|" returnTy? ":" inlineExpr

    "Int"
    "HexInt"
    "BinInt"
    "Str"
    "Char"


sequence:
    "[" "]"
    "[" seqElem (_"," seqElem)* _","? "]"


seqElem:
    inlineExpr (_"=" inlineExpr)?
|#


# TODO: With PEG we don't need to combine tilde with the upper ids, get rid of TildeUpperId.
constructor Constructor:
    ty="UpperId" con=("." con="UpperId")? userTyArgs=tyArgs?:
        Constructor(
            variant = Bool.False,
            ty = newId(ty.text),
            constr = con.map(|con: (con: Token)|: newId(con.con.text)),
            userTyArgs = userTyArgs.unwrapOr(Vec.empty()),
            tyArgs = Vec.empty(),
        )

    ty="TildeUpperId" con=("." con="UpperId")? userTyArgs=tyArgs?:
        Constructor(
            variant = Bool.True,
            ty = newId(ty.text),
            constr = con.map(|con: (con: Token)|: newId(con.con.text)),
            userTyArgs = userTyArgs.unwrapOr(Vec.empty()),
            tyArgs = Vec.empty(),
        )


upperIdPath:
    "UpperId" (_"." "UpperId")*
    "TildeUpperId" (_"." "UpperId")*


tyArgs Vec[Type]:
    "[" t0=type_ ts=("," t=type_)* ","? "]":
        let ts: Vec[Type] = once(t0).chain(ts.iter().map(|t: (t: Type)|: t.t)).toVec()
        ts


#|
parenExpr:
    "LowerId" "=" expr
    expr


exprPrefix:
    "~"
    "-"
    "not"


binOp:
    "+"
    "-"
    "*"
    "/"
    "=="
    "!="
    "and"
    "or"
    "|"
    "&"
    "/"
    ">"
    ">>"
    ">="
    "<"
    "<<"
    "<="


matchAlt:
    pat altGuard? _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"
    pat altGuard? _":" stmt


altGuard:
    "if" expr


matchRhs:
    _"NEWLINE" _"INDENT" blockExpr
    inlineExpr


fnArgs:
    "LowerId" (_":" type_)? ("," "LowerId" (_":" type_)?)* _","?


# --------------------------------------------------------------------------------------------------
# Statements
|#

stmt Stmt:
    "break" label="label"? "NEWLINE":
        Stmt.Break(label = label.map(|l: Token|: newId(l.text)), level = 0)

    "continue" label="label"? "NEWLINE":
        Stmt.Continue(label = label.map(|l: Token|: newId(l.text)), level = 0)

#|
    "let" pat (_":" type_)? "=" letRhs

    loopLabel? "for" pat (_":" type_)? "in" inlineExpr _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"

    loopLabel? "while" inlineExpr _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"

    loopLabel? "loop" _":" _"NEWLINE" _"INDENT" stmt+ _"DEDENT"

    inlineExpr stmtExprCont?

    blockExpr

loopLabel:
    "label" _":"


letRhs:
    inlineExpr _"NEWLINE"
    blockExpr


stmtExprCont:
    _"NEWLINE"
    assignOp blockExpr
    assignOp inlineExpr _"NEWLINE"
|#

assignOp AssignOp:
    "=": AssignOp.Eq
    "+=": AssignOp.PlusEq
    "-=": AssignOp.MinusEq
    "*=": AssignOp.StarEq
    "^=": AssignOp.CaretEq


# --------------------------------------------------------------------------------------------------
# Patterns


pat Pat:
    p0=simplePat ps=("|" p=simplePat)*:
        if ps.isEmpty():
            p0
        else:
            # foldr1 Pat.Or (p0 : ps)
            let pRet = ps.pop().unwrap().p
            if ps.isEmpty():
                Pat.Or(p0, pRet)
            else:
                let i: U32 = ps.len() - 1
                loop:
                    pRet = Pat.Or(ps.get(i).p, pRet)
                    if i == 0:
                        break
                    i -= 1
                Pat.Or(p0, pRet)


simplePat Pat:
    # Variables
    var_="LowerId":
        Pat.Var(VarPat(var_ = newId(var_.text), ty = Option.None))

    # Constructors
    con=constructor fs=("(" p0=recordFieldPat ps=("," p=recordFieldPat)* ignoreRest=("," "..")? ")")?:
        Pat.Constr(ConstrPat(
            constr = con,
            fields = match fs:
                Option.None:
                    Vec.empty()
                Option.Some((p0, ps, ..)):
                    once(p0).chain(ps.iter().map(|p: (p: Named[Pat])|: p.p)).toVec(),
            ignoreRest = match fs:
                Option.None:
                    Bool.False
                Option.Some((ignoreRest, ..)):
                    ignoreRest.isSome()
        ))

    # Records: `(pat, pat)`, `(var = pat, ...)`
    "(" ")":
        Pat.Record(RecordPat(fields = Vec.empty(), ignoreRest = Bool.False, inferredTy = Option.None))

    "(" p0=recordFieldPat ps=("," p=recordFieldPat)* ","? ")":
        Pat.Record(RecordPat(
            fields = once(p0).chain(ps.iter().map(|p: (p: Named[Pat])|: p.p)).toVec(),
            ignoreRest = Bool.False,
            inferredTy = Option.None,
        ))

    "(" p0=recordFieldPat ps=("," p=recordFieldPat)* "," ignoreRest=".." ")":
        Pat.Record(RecordPat(
            fields = once(p0).chain(ps.iter().map(|p: (p: Named[Pat])|: p.p)).toVec(),
            ignoreRest = Bool.True,
            inferredTy = Option.None,
        ))

    # Ignore
    "_":
        Pat.Ignore

    # Literals.
    str="Str" binder=strPfxBinder?:
        Pat.StrPfx(str.text, binder.flatten())

    # "Char"
    char="Char":
        panic("TODO")


strPfxBinder Option[Id]:
    id="LowerId": Option.Some(newId(id.text))
    "_": Option.None


recordFieldPat Named[Pat]:
    name="LowerId" "=" pat=pat:
        Named(name = Option.Some(newId(name.text)), node = pat)

    pat=pat:
        Named(name = Option.None, node = pat)


# --------------------------------------------------------------------------------------------------
# Import declarations


importDecl ImportDecl:
    "import" p0="UpperId" ps=("." p="UpperId")* "NEWLINE":
        let vec: Vec[Str] = once(p0.text).chain(ps.iter().map(|p: (p: Token)|: p.p.text)).toVec()
        ImportDecl(path = vec)


# --------------------------------------------------------------------------------------------------
# Top-level functions

topFunDecl FunDecl:
    "prim" sig=topFunSig "NEWLINE":
        FunDecl(
            parentTy = sig.parentTy,
            name = sig.name,
            sig = sig.sig,
            body = Option.None,
        )

    sig=topFunSig ":" "NEWLINE" "INDENT" body=stmt+ "DEDENT":
        FunDecl(
            parentTy = sig.parentTy,
            name = sig.name,
            sig = sig.sig,
            body = Option.Some(body),
        )

    sig=topFunSig ":" body=inlineExpr "NEWLINE":
        FunDecl(
            parentTy = sig.parentTy,
            name = sig.name,
            sig = sig.sig,
            body = Option.Some(Vec.[Stmt.Expr(body)]),
        )


topFunSig (parentTy: Option[Id], name: Id, sig: FunSig):
    parentTy=(id="UpperId" ".")? name="LowerId" ctx=context? params=paramList ret=returnTy?:
        let ret = ret.unwrapOr((ret = Option.None, exn = Option.None))
        (
            parentTy = parentTy.map(|id: (id: Token)|: newId(id.id.text)),
            name = newId(name.text),
            sig = FunSig(
                context = ctx.unwrapOr(Context(typeParams = Vec.empty(), preds = Vec.empty())),
                self_ = SelfParam.No,       # TODO
                params,
                exceptions = ret.exn,
                returnTy = ret.ret,
            ),
        )


# TODO: Weird name, rename.
parentTy Id:
    id="UpperId" ".":
        newId(id.text)


context Context:
    "[" t0=type_ ts=("," t=type_)* ","? "]":
        Context(
            typeParams = Vec.empty(),   # generated by the type checker
            preds = once(t0).chain(ts.iter().map(|t: (t: Type)|: t.t)).toVec(),
        )


paramList Vec[(name: Id, ty: Option[Type])]:
    "(" ")":
        Vec.empty()

    "(" p0=param ps=("," p=param)* ","? ")":
        let vec: Vec[(name: Id, ty: Option[Type])] =
            once(p0).chain(ps.iter().map(|p: (p: (name: Id, ty: Option[Type]))|: p.p)).toVec()
        vec


param (name: Id, ty: Option[Type]):
    name="LowerId" ty=(":" ty=type_)?:
        (name = newId(name.text), ty = ty.map(|ty: (ty: Type)|: ty.ty))


# --------------------------------------------------------------------------------------------------
# Trait declarations


traitDecl TraitDecl:
    "trait" name="UpperId" "[" tys=typeParams "]" rhs=traitDeclRhs?:
        TraitDecl(
            name = newId(name.text),
            typeParams = tys,
            typeParamKinds = Vec.empty(),       # will be generated by kind inference
            items = rhs.unwrapOr(Vec.empty()),
        )


traitDeclRhs Vec[FunDecl]:
    "NEWLINE": Vec.empty()
    ":" "NEWLINE" "INDENT" fs=funDecl+ "DEDENT": fs


# --------------------------------------------------------------------------------------------------
# Impl declarations


implDecl ImplDecl:
    "impl" ctx=context? name="UpperId" "[" t0=type_ ts=("," t=type_)* ","? "]" rhs=implDeclRhs:
        ImplDecl(
            context = ctx.unwrapOr(Context(typeParams = Vec.empty(), preds = Vec.empty())),
            trait_ = newId(name.text),
            tys = once(t0).chain(ts.iter().map(|ts: (t: Type)|: ts.t)).toVec(),
            items = rhs,
        )


implDeclRhs Vec[FunDecl]:
    "NEWLINE": Vec.empty()
    ":" "NEWLINE" "INDENT" funs=funDecl+ "DEDENT": funs


# --------------------------------------------------------------------------------------------------


funDecl FunDecl:
    prim_="prim"? sig=funSig _"NEWLINE":
        # TODO: Add prim to FunDecl
        FunDecl(
            parentTy = Option.None,
            name = sig.id,
            sig = sig.sig,
            body = Option.None
        )

    sig=funSig stmts=funDeclRhs:
        FunDecl(
            parentTy = Option.None,
            name = sig.id,
            sig = sig.sig,
            body = Option.Some(stmts),
        )


funDeclRhs Vec[Stmt]:
    ":" "NEWLINE" "INDENT" stmts=stmt+ "DEDENT":
        stmts

    ":" expr=inlineExpr "NEWLINE":
        let vec: Vec[Stmt] = Vec.[Stmt.Expr(expr)]
        vec


funSig (id: Id, sig: FunSig):
    id="LowerId" ctx=context? params=paramList ret=returnTy?:
        let ret = ret.unwrapOr((ret = Option.None, exn = Option.None))
        (
            id = newId(id.text),
            sig = FunSig(
                context = ctx.unwrapOr(Context(typeParams = Vec.empty(), preds = Vec.empty())),
                self_ = SelfParam.No,       # TODO
                params,
                exceptions = ret.exn,
                returnTy = ret.ret,
            ),
        )
