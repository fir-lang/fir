#![allow(unused)]
#![allow(clippy::all)]

use crate::ast::*;
use crate::token::{TokenKind, Token};
use crate::interpolation::parse_string_parts;

use std::convert::Infallible;
use std::rc::Rc;

use lexgen_util::{LexerError, Loc};
use smol_str::SmolStr;

grammar<'a>(module: &'a Rc<str>);

extern {
    type Location = Loc;
    type Error = LexerError<Infallible>;

    enum Token {
        UpperId => Token { kind: TokenKind::UpperId, .. },
        LowerId => Token { kind: TokenKind::LowerId, .. },
        "(" => Token { kind: TokenKind::LParen, .. },
        ")" => Token { kind: TokenKind::RParen, .. },
        "[" => Token { kind: TokenKind::LBracket, .. },
        "]" => Token { kind: TokenKind::RBracket, .. },
        "{" => Token { kind: TokenKind::LBrace, .. },
        "}" => Token { kind: TokenKind::RBrace, .. },
        ":" => Token { kind: TokenKind::Colon, .. },
        "," => Token { kind: TokenKind::Comma, .. },
        "." => Token { kind: TokenKind::Dot, .. },
        "=" => Token { kind: TokenKind::Eq, .. },
        ".." => Token { kind: TokenKind::DotDot, .. },
        "_" => Token { kind: TokenKind::Underscore, .. },
        "==" => Token { kind: TokenKind::EqEq, .. },
        "+" => Token { kind: TokenKind::Plus, .. },
        "-" => Token { kind: TokenKind::Minus, .. },
        "*" => Token { kind: TokenKind::Star, .. },
        "+=" => Token { kind: TokenKind::PlusEq, .. },
        "-=" => Token { kind: TokenKind::MinusEq, .. },
        "!" => Token { kind: TokenKind::Exclamation, .. },
        "!=" => Token { kind: TokenKind::ExclamationEq, .. },
        "&&" => Token { kind: TokenKind::AmpAmp, .. },
        "|" => Token { kind: TokenKind::Pipe, .. },
        "||" => Token { kind: TokenKind::PipePipe, .. },
        "<" => Token { kind: TokenKind::LAngle, .. },
        "<=" => Token { kind: TokenKind::LAngleEq, .. },
        ">" => Token { kind: TokenKind::RAngle, .. },
        ">=" => Token { kind: TokenKind::RAngleEq, .. },
        INDENT => Token { kind: TokenKind::Indent, .. },
        DEDENT => Token { kind: TokenKind::Dedent, .. },
        NEWLINE => Token { kind: TokenKind::Newline, .. },
        "type" => Token { kind: TokenKind::Type, .. },
        "fn" => Token { kind: TokenKind::Fn, .. },
        "let" => Token { kind: TokenKind::Let, .. },
        "if" => Token { kind: TokenKind::If, .. },
        "else" => Token { kind: TokenKind::Else, .. },
        "elif" => Token { kind: TokenKind::Elif, .. },
        "match" => Token { kind: TokenKind::Match, .. },
        "self" => Token { kind: TokenKind::Self_, .. },
        "for" => Token { kind: TokenKind::For, .. },
        "while" => Token { kind: TokenKind::While, .. },
        "in" => Token { kind: TokenKind::In, .. },
        "return" => Token { kind: TokenKind::Return, .. },
        "import" => Token { kind: TokenKind::Import, .. },
        "prim" => Token { kind: TokenKind::Prim, .. },
        "trait" => Token { kind: TokenKind::Trait, .. },
        "impl" => Token { kind: TokenKind::Impl, .. },
        IntLit => Token { kind: TokenKind::Int, .. },
        StringLit => Token { kind: TokenKind::String, .. },
        CharLit => Token { kind: TokenKind::Char, .. },
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Utils
//
////////////////////////////////////////////////////////////////////////////////////////////////////

// Note: This allows trailing separator.
Sep<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Note: This doesn't allow trailing separator.
Sep1<T, S>: Vec<T> = {
    <e0:T> <mut v:(S <T>)*> => {
        v.insert(0, e0);
        v
    }
};

LUpperId: L<SmolStr> = {
    <l:@L> <id:UpperId> <r:@R> => L::new(module, l, r, id.smol_str()),
}

LLowerId: L<SmolStr> = {
    <l:@L> <id:LowerId> <r:@R> => L::new(module, l, r, id.smol_str()),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Type declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

TypeDecl: L<TypeDecl> = {
    <l:@L> "type" <type_name:UpperId> <type_params:TypeParams> <rhs:TypeDeclRhs> <r:@R> =>
        L::new(module, l, r, TypeDecl {
            name: type_name.smol_str(),
            type_params,
            rhs: Some(rhs),
        }),

    <l:@L> "prim" "type" <type_name:UpperId> <type_params:TypeParams> NEWLINE <r:@R> =>
        L::new(module, l, r, TypeDecl {
            name: type_name.smol_str(),
            type_params,
            rhs: None,
        }),
}

TypeDeclRhs: TypeDeclRhs = {
    ":" NEWLINE INDENT <constrs:TypeConstrs> DEDENT =>
        TypeDeclRhs::Sum(constrs),

    ":" NEWLINE INDENT <named_fields:NamedFields> DEDENT =>
        TypeDeclRhs::Product(ConstructorFields::Named(named_fields)),
}

TypeParams: Vec<SmolStr> = {
    => vec![],

    "[" <params:Sep<UpperId, ",">> "]" =>
        params.into_iter().map(|id| id.smol_str()).collect(),
}

TypeConstrs: Vec<ConstructorDecl> = {
    ConstructorDecl+
}

ConstructorDecl: ConstructorDecl = {
    <name:UpperId> NEWLINE =>
        ConstructorDecl {
            name: name.smol_str(),
            fields: ConstructorFields::Empty
        },

    <name:UpperId> ":" NEWLINE INDENT <named_fields:NamedFields> DEDENT =>
        ConstructorDecl {
            name: name.smol_str(),
            fields: ConstructorFields::Named(named_fields),
        },

    <name:UpperId> "(" <fields:UnnamedFields> ","? ")" NEWLINE =>
        ConstructorDecl {
            name: name.smol_str(),
            fields: ConstructorFields::Unnamed(fields),
        },
}

NamedFields: Vec<(SmolStr, Type)> = {
    (<NamedField> NEWLINE)+
}

NamedField: (SmolStr, Type) = {
    <name:LowerId> ":" <type_:Type> =>
        (name.smol_str(), type_),
}

UnnamedFields: Vec<Type> = {
    <mut fields:UnnamedFields> "," <field:Type> => {
        fields.push(field);
        fields
    },

    <field:Type> => vec![field],
}

LType: L<Type> = {
    <l:@L> <ty:Type> <r:@R> => L::new(module, l, r, ty),
}

Type: Type = {
    <name:UpperId> =>
        Type::Named(NamedType { name: name.smol_str(), args: vec![] }),

    <name:UpperId> "[" <args:Sep<TypeArg, ",">> "]" =>
        Type::Named(NamedType { name: name.smol_str(), args }),

    "(" <fields:Sep<RecordTypeField, ",">> ")" =>
        Type::Record(fields),
}

TypeArg: L<(Option<SmolStr>, L<Type>)> = {
    <l:@L> <name:UpperId> "=" <ty:LType> <r:@R> =>
        L::new(module, l, r, (Some(name.smol_str()), ty)),

    <ty:LType> => {
        let loc = ty.loc.clone();
        L { loc, node: (None, ty) }
    },
}

RecordTypeField: Named<Type> = {
    <name:LowerId> ":" <ty:Type> => Named { name: Some(name.smol_str()), node: ty },
    <ty:Type> => Named { name: None, node: ty },
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Function declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

FunDecl: L<FunDecl> = {
    // We need two productions here as with two optional bracketed type/pred
    // list we can't tell that one list means only type list.

    // TODO: comma parsing after `self` is not right.

    <l:@L> <sig:FunSig> "=" NEWLINE INDENT <body_l:@L> <body:LStmts> <body_r:@R> DEDENT <r:@R> =>
        L::new(module, l, r, FunDecl {
            sig,
            body: Some(L::new(module, body_l, body_r, body)),
        }),

    <l:@L> "prim"? <sig:FunSig> NEWLINE <r:@R> =>
        L::new(module, l, r, FunDecl {
            sig,
            body: None,
        }),
}

LFunSig: L<FunSig> = {
    <l:@L> <sig:FunSig> <r:@R> =>
        L::new(module, l, r, sig),
}

FunSig: FunSig = {
    "fn" <name:LLowerId>
            <type_params:("[" <Sep<TyParamWithPreds, ",">> "]")?>
            "(" <self_:("self" ","?)?> <params:Sep<(<LowerId> ":" <LType>), ",">> ")"
            <return_ty:(":" <LType>)?> =>
        FunSig {
            name,
            type_params: type_params.unwrap_or(vec![]),
            self_: self_.is_some(),
            params: params.into_iter().map(|(name, ty)| (name.smol_str(), ty)).collect(),
            return_ty,
        },
}

TyParamWithPreds: L<(L<SmolStr>, Vec<L<Type>>)> = {
    <l:@L> <ty_param:LUpperId> <r:@R> => L::new(module, l, r, (ty_param, vec![])),
    <l:@L> <ty_param:LUpperId> ":" <tys:Sep<LType, "+">> <r:@R> => L::new(module, l, r, (ty_param, tys)),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Statements
//
////////////////////////////////////////////////////////////////////////////////////////////////////

LStmts: Vec<L<Stmt>> = {
    <stmts:LStmt*> =>
        stmts,
}

pub LStmt: L<Stmt> = {
    <l:@L> <stmt:Stmt> <r:@R> => L::new(module, l, r, stmt),
}

Stmt: Stmt = {
    "let" <lhs:LPat> <ty:(":" <LType>)?> "=" <rhs:LInlineExpr> NEWLINE =>
        Stmt::Let(LetStmt { lhs, ty, rhs }),

    "let" <lhs:LPat> <ty:(":" <LType>)?> "=" <rhs:LBlockExpr> =>
        Stmt::Let(LetStmt { lhs, ty, rhs }),

    <lhs:LInlineExpr> <op:AssignOp> <rhs:LExpr> NEWLINE =>
        Stmt::Assign(AssignStmt {
            lhs,
            rhs,
            op,
        }),

    <l:@L> <expr:InlineExpr> <r:@R> NEWLINE =>
        Stmt::Expr(L::new(module, l, r, expr)),

    <l:@L> <expr:BlockExpr> <r:@R> =>
        Stmt::Expr(L::new(module, l, r, expr)),

    "for" <id:LowerId> "in" <expr:LExpr> ":" NEWLINE INDENT <statements:LStmts> DEDENT =>
        Stmt::For(ForStmt {
            var: id.smol_str(),
            ty: None,
            expr,
            body: statements,
        }),

    "while" <cond:LExpr> ":" NEWLINE INDENT <statements:LStmts> DEDENT =>
        Stmt::While(WhileStmt {
            cond,
            body:statements,
        }),

    // <fun:FunDecl> =>
    //     Stmt::LetFn(fun),
}

Alts: Vec<Alt> = {
    Alt*
}

Alt: Alt = {
    <pattern:LPat> ":" NEWLINE INDENT <stmts:LStmts> DEDENT =>
        Alt {
            pattern,
            guard: None,
            rhs: stmts,
        },

    <pattern:LPat> ":" <stmt:LStmt>  =>
        Alt {
            pattern,
            guard: None,
            rhs: vec![stmt],
        },
}

AssignOp: AssignOp = {
    "=" => AssignOp::Eq,
    "+=" => AssignOp::PlusEq,
    "-=" => AssignOp::MinusEq,
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Expressions
//
////////////////////////////////////////////////////////////////////////////////////////////////////

pub LExpr: L<Expr> = {
    <l:@L> <expr:Expr> <r:@R> => L::new(module, l, r, expr),
}

Expr: Expr = {
    <expr:InlineExpr> => expr,
    <expr:BlockExpr>  => expr,
}

LBlockExpr: L<Expr> = {
    <l:@L> <expr:BlockExpr> <r:@R> =>
        L::new(module, l, r, expr),
}

// Block expressions are also statements, without a NEWLINE after them.
BlockExpr: Expr = {
    "match" <expr:LInlineExpr> ":" NEWLINE INDENT <alts:Alts> DEDENT =>
        Expr::Match(MatchExpr {
            scrutinee: Box::new(expr),
            alts,
        }),

    "if" <cond:LExpr> ":" NEWLINE INDENT <then_:LStmts> DEDENT
            <mut branches:("elif" <LExpr> ":" NEWLINE INDENT <LStmts> DEDENT)*>
            <else_branch:("else" ":" NEWLINE INDENT <LStmts> DEDENT)?> => {
        branches.insert(0, (cond, then_));
        Expr::If(IfExpr {
            branches,
            else_branch,
        })
    },
}

LInlineExpr: L<Expr> = {
    <l:@L> <expr:InlineExpr> <r:@R> =>
        L::new(module, l, r, expr),
}

// Inline expressions can be made statements with a NEWLINE after them.
InlineExpr: Expr = {
    #[precedence(level = "0")]
    "self" =>
        Expr::Self_,

    <id:LowerId> =>
        Expr::Var(id.smol_str()),

    <id:UpperId> =>
        Expr::UpperVar(id.smol_str()),

    "(" <mut exprs:Sep<ParenExpr, ",">> ")" => {
        match exprs.len() {
            0 => Expr::Record(vec![]),
            1 if exprs[0].0.is_none() => exprs.pop().unwrap().1.node,
            _ => Expr::Record(exprs.into_iter().map(|(name, expr)| Named { name: name, node: Box::new(expr) }).collect()),
        }
    },

    <int:IntLit> =>
        Expr::Int(i32::from_str_radix(&int.text, 10).unwrap_or_else(|_| panic!("Can't parse I32: {}", int.text))),

    <l:@L> <string:StringLit> => {
        let l = Loc { line: l.line, col: l.col + 1, byte_idx: l.byte_idx + 1 };
        Expr::String(parse_string_parts(module, &string.text[1..string.text.len() - 1], l))
    },

    <char:CharLit> =>
        Expr::Char(char.text.chars().nth(1).unwrap()),

    <l:@L> <array:InlineExpr> <r:@R> "[" <index:LExpr> "]" =>
        Expr::ArrayIndex(ArrayIndexExpr {
            array: Box::new(L::new(module, l, r, array)),
            index: Box::new(index),
        }),

    <l:@L> <fun:InlineExpr> <r:@R> "(" <args:Sep<CallArg, ",">> ")" =>
        Expr::Call(CallExpr {
            fun: Box::new(L::new(module, l, r, fun)),
            args,
        }),

    <l:@L> <expr:InlineExpr> <r:@R> "." <field:LowerId> =>
        Expr::FieldSelect(FieldSelectExpr {
            object: Box::new(L::new(module, l, r, expr)),
            field: field.smol_str(),
        }),

    <expr:InlineExpr> "." <constr:UpperId> => {
        match expr {
            Expr::UpperVar(ty) => Expr::ConstrSelect(ConstrSelectExpr {
                ty,
                constr: constr.smol_str(),
            }),

            _ => panic!(),
        }
    },

    #[precedence(level = "1")]
    #[assoc(side = "left")]
    <l1:@L> <from:InlineExpr> <r1:@R> ".." <l2:@L> <to:InlineExpr> <r2:@R> =>
        Expr::Range(RangeExpr {
            from: Box::new(L::new(module, l1, r1, from)),
            to: Box::new(L::new(module, l2, r2, to)),
            inclusive: false,
        }),

    #[precedence(level = "2")]
    "!" <l:@L> <expr:InlineExpr> <r:@R> =>
        Expr::UnOp(UnOpExpr { op: UnOp::Not, expr: Box::new(L::new(module, l, r, expr)) }),

    #[precedence(level = "3")]
    #[assoc(side = "left")]
    <l1:@L> <left:InlineExpr> <r1:@R> "*" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Multiply,
        }),

    #[precedence(level = "4")]
    #[assoc(side = "left")]
    <l1:@L> <left:InlineExpr> <r1:@R> "+" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Add,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> "-" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Subtract,
        }),

    #[precedence(level = "5")]
    #[assoc(side = "left")]
    <l1:@L> <left:InlineExpr> <r1:@R> "==" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Equal,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> "!=" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::NotEqual,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> "<" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Lt,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> ">" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Gt,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> "<=" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::LtEq,
        }),

    <l1:@L> <left:InlineExpr> <r1:@R> ">=" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::GtEq,
        }),

    #[precedence(level = "6")]
    #[assoc(side = "left")]
    <l1:@L> <left:InlineExpr> <r1:@R> "&&" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::And,
        }),

    #[precedence(level = "7")]
    #[assoc(side = "left")]
    <l1:@L> <left:InlineExpr> <r1:@R> "||" <l2:@L> <right:InlineExpr> <r2:@R> =>
        Expr::BinOp(BinOpExpr {
            left: Box::new(L::new(module, l1, r1, left)),
            right: Box::new(L::new(module, l2, r2, right)),
            op: BinOp::Or,
        }),

    #[precedence(level = "8")]
    "return" <expr:LInlineExpr> =>
        Expr::Return(Box::new(expr)),
}

ParenExpr: (Option<SmolStr>, L<Expr>) = {
    <id:LowerId> "=" <expr:LExpr> =>
        (Some(id.smol_str()), expr),

    <expr:LExpr> =>
        (None, expr),
}

CallArg: CallArg = {
    <name:LowerId> "=" <expr:LExpr> =>
        CallArg {
            name: Some(name.smol_str()),
            expr,
        },

    <expr:LExpr> =>
        CallArg {
            name: None,
            expr,
        },
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Patterns
//
////////////////////////////////////////////////////////////////////////////////////////////////////

LPat: L<Pat> = {
    <l:@L> <pat:Pat> <r:@R> => L::new(module, l, r, pat),
}

Pat: Pat = {
    #[precedence(level = "0")]
    <id:LowerId> => Pat::Var(id.smol_str()),

    <constr:ConstrPattern> => Pat::Constr(constr),

    "(" <fields:Sep<PatternField, ",">> ")" =>
        Pat::Record(fields.into_iter().map(|(name, pat)| Named { name, node: Box::new(pat) }).collect()),

    "_" => Pat::Ignore,

    <str:StringLit> => Pat::Str(str.text[1..str.text.len() - 1].to_string()),

    <char:CharLit> => Pat::Char(char.text.chars().nth(1).unwrap()),

    <str:StringLit> <id:LowerId> => Pat::StrPfx(str.text[1..str.text.len() - 1].to_string(), id.smol_str()),

    #[precedence(level = "1")]
    #[assoc(side = "right")]
    <l1:@L> <p1:Pat> <r1:@R> "|" <l2:@L> <p2:Pat> <r2:@L> => {
        Pat::Or(
            Box::new(L::new(module, l1, r1, p1)),
            Box::new(L::new(module, l2, r2, p2)),
        )
    }
}

Constructor: Constructor = {
    <type_:UpperId> "." <constr:UpperId> =>
        Constructor { type_: type_.smol_str(), constr: Some(constr.smol_str()) },

    <type_:UpperId> =>
        Constructor { type_: type_.smol_str(), constr: None },
}

ConstrPattern: ConstrPattern = {
    <constr:Constructor> =>
        ConstrPattern { constr, fields: vec![] },

    <constr:Constructor> "(" <fields:Sep<PatternField, ",">> ")" =>
        ConstrPattern { constr, fields: fields.into_iter().map(|(name, pat)| Named { name, node: Box::new(pat) }).collect() },
}

PatternField: (Option<SmolStr>, L<Pat>) = {
    <id:LowerId> "=" <pat:LPat> =>
        (Some(id.smol_str()), pat),

    <pat:LPat> =>
        (None, pat),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Import declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

ImportDecl: L<ImportDecl> = {
    <l:@L> "import" <path:Sep<UpperId, ".">> NEWLINE <r:@R> =>
        L::new(module, l, r, ImportDecl { path: path.into_iter().map(|t| t.smol_str()).collect() }),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Trait declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

TraitDecl: L<TraitDecl> = {
    <l:@L> "trait" <name:LUpperId> "[" <bound_l:@L> <ty:UpperId> <bounds:(":" <Sep<LType, "+">>)?> <bound_r:@R> "]" ":"
            NEWLINE INDENT <items:TraitDeclItem+> DEDENT <r:@R> =>
        L::new(module, l, r, TraitDecl {
            name,
            ty: L::new(module, bound_l, bound_r, (ty.smol_str(), bounds.unwrap_or(vec![]))),
            items,
        })
}

TraitDeclItem: L<TraitDeclItem> = {
    <l:@L> "type" <name:UpperId> NEWLINE <r:@R> =>
        L::new(module, l, r, TraitDeclItem::AssocTy(name.smol_str())),

    <fun_decl:FunDecl> =>
         fun_decl.map(TraitDeclItem::Fun),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Impl declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

ImplDecl: L<ImplDecl> = {
    <l:@L> "impl" <context:Context> <ty:LType> ":"
            NEWLINE INDENT <items:ImplDeclItem*> DEDENT <r:@R> => {
        L::new(module, l, r, ImplDecl {
            context,
            ty,
            items,
        })
    }
}

Context: Vec<L<(SmolStr, Vec<SmolStr>)>> = {
    => vec![],

    "[" <tys:TypeWithBounds*> "]" => tys,
}

TypeWithBounds: L<(SmolStr, Vec<SmolStr>)> = {
    <l:@L> <ty:UpperId> <r:@R> =>
        L::new(module, l, r, (ty.smol_str(), vec![])),

    <l:@L> <ty:UpperId> ":" <bounds:Sep1<UpperId, "+">> <r:@R> =>
        L::new(module, l, r, (ty.smol_str(), bounds.into_iter().map(|id| id.smol_str()).collect())),
}

ImplDeclItem: L<ImplDeclItem> = {
    <l:@L> "type" <name:UpperId> "=" <ty:LType> NEWLINE <r:@R> =>
        L::new(module, l, r, ImplDeclItem::AssocTy(AssocTyDecl { name: name.smol_str(), ty })),

    <fun_decl:FunDecl> =>
        fun_decl.map(ImplDeclItem::Fun),
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Top-level declarations
//
////////////////////////////////////////////////////////////////////////////////////////////////////

pub TopDecls: Vec<L<TopDecl>> = {
    TopDecl*
}

TopDecl: L<TopDecl> = {
    NEWLINE* <l:@L> <type_decl:TypeDecl> <r:@R> =>
        L::new(module, l, r, TopDecl::Type(type_decl)),

    NEWLINE* <l:@L> <fun_decl:FunDecl> <r:@R> =>
        L::new(module, l, r, TopDecl::Fun(fun_decl)),

    NEWLINE* <l:@L> <import_decl:ImportDecl> <r:@R> =>
        L::new(module, l, r, TopDecl::Import(import_decl)),

    NEWLINE* <l:@L> <trait_decl:TraitDecl> <r:@R> =>
        L::new(module, l, r, TopDecl::Trait(trait_decl)),

    NEWLINE* <l:@L> <impl_decl:ImplDecl> <r:@R> =>
        L::new(module, l, r, TopDecl::Impl(impl_decl)),
}
